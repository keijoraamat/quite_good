name: Main Workflow

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  APP_VERSION: ${{ github.run_number }}
  ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
  PAT: ${{ secrets.CLASSICAL_TOKEN }}
  ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  build-backend:
    name: Build and Publish Image
    runs-on: ubuntu-24.04

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ env.PAT }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with: 
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: us-east-1

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}:${{ env.APP_VERSION }}


      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Fill in the new image and account ID in the ECS task definition
        run: |
          export ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}:${{ env.APP_VERSION }}
          sed -i 's|<IMAGE_NAME>|'"$NEW_IMAGE_URI"'|g' task-def.json
          sed -i 's|<AWS_ACCOUNT_ID>|'${{ env.ACCOUNT_ID }}'|g' task-def.json
  
      - name: Update ECS Service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: task-def.json
          service: flask-app-service
          cluster: ecs-cluster
          wait-for-service-stability: true
  